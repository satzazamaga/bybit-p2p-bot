import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

API_TOKEN = '8093706202:AAHRJz_paYKZ0R50TbUhcprxXmJd0VXy_mA'
OWNER_ID = 5791850798  # –¢–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
filter_spread = 5
currencies = ['USDT', 'BTC', 'TON']
banks = []
check_interval = 5  # –≤ –º–∏–Ω—É—Ç–∞—Ö
history_log = []
is_checking = False

# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(
    KeyboardButton('üöÄ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'), KeyboardButton('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
).add(
    KeyboardButton('üìä –°—Ç–∞—Ç—É—Å'), KeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è')
).add(
    KeyboardButton('üîÅ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
)

# ========== –ö–æ–º–∞–Ω–¥—ã ==========

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=menu)

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer("""
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üöÄ /start_check ‚Äî –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
üõë /stop_check ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
üìä /status ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
üìú /history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
üîÅ /reset ‚Äî —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚ùì /help ‚Äî –ø–æ–º–æ—â—å

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
/set_filter 5 ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
/currencies USDT BTC ‚Äî –≤–∞–ª—é—Ç—ã
/banks Kaspi –•–∞–ª—ã–∫ ‚Äî –±–∞–Ω–∫–∏
/interval 5 ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)
    """, reply_markup=menu)

@dp.message_handler(commands=['status'])
async def status(message: types.Message):
    await message.answer(
        f"üìä –°—Ç–∞—Ç—É—Å:
–í–∞–ª—é—Ç—ã: {', '.join(currencies)}
–°–ø—Ä–µ–¥: {filter_spread}‚Ç∏
–ë–∞–Ω–∫–∏: {'–≤—Å–µ' if not banks else ', '.join(banks)}
–ò–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} –º–∏–Ω
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –í–ö–õ' if is_checking else 'üî¥ –í–´–ö–õ'}"
    )

@dp.message_handler(commands=['set_filter'])
async def set_filter(message: types.Message):
    global filter_spread
    try:
        value = int(message.get_args())
        filter_spread = value
        await message.answer(f"‚úÖ –°–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {filter_spread}‚Ç∏")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: /set_filter 5")

@dp.message_handler(commands=['currencies'])
async def set_currencies(message: types.Message):
    global currencies
    args = message.get_args().split()
    if args:
        currencies = args
        await message.answer(f"‚úÖ –í–∞–ª—é—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(currencies)}")
    else:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /currencies USDT BTC")

@dp.message_handler(commands=['banks'])
async def set_banks(message: types.Message):
    global banks
    args = message.get_args().split()
    banks = args
    await message.answer(f"‚úÖ –ë–∞–Ω–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {'–≤—Å–µ' if not banks else ', '.join(banks)}")

@dp.message_handler(commands=['interval'])
async def set_interval(message: types.Message):
    global check_interval
    try:
        value = int(message.get_args())
        check_interval = value
        await message.answer(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {check_interval} –º–∏–Ω")
    except:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /interval 10")

@dp.message_handler(commands=['reset'])
async def reset_filters(message: types.Message):
    global filter_spread, currencies, banks
    filter_spread = 5
    currencies = ['USDT', 'BTC', 'TON']
    banks = []
    await message.answer("üîÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

@dp.message_handler(commands=['history'])
async def history(message: types.Message):
    if history_log:
        await message.answer("\n\n".join(history_log[-5:]))
    else:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")

# ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–¥–µ–ª–æ–∫ (—Ä–µ–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ Bybit API) ==========
async def check_market():
    global history_log
    while is_checking:
        try:
            results = []
            now = datetime.now().strftime("%H:%M:%S")
            for currency in currencies:
                response_buy = requests.get(f"https://api2.bybit.com/fiat/otc/item/online", params={
                    "userId": "",
                    "tokenId": currency,
                    "currencyId": "KZT",
                    "payment": banks,
                    "side": "1",
                    "size": "10",
                    "page": "1"
                }).json()

                response_sell = requests.get(f"https://api2.bybit.com/fiat/otc/item/online", params={
                    "userId": "",
                    "tokenId": currency,
                    "currencyId": "KZT",
                    "payment": banks,
                    "side": "2",
                    "size": "10",
                    "page": "1"
                }).json()

                buy_price = float(response_buy['result']['items'][0]['price'])
                sell_price = float(response_sell['result']['items'][0]['price'])
                spread = sell_price - buy_price

                if spread >= filter_spread:
                    result = f"[{now}] {currency} ‚Äî –ö—É–ø–∏—Ç—å: {buy_price}‚Ç∏ / –ü—Ä–æ–¥–∞—Ç—å: {sell_price}‚Ç∏ ‚û° –°–ø—Ä–µ–¥: {spread:.2f}‚Ç∏"
                    results.append(result)

            if results:
                for r in results:
                    history_log.append(r)
                    await bot.send_message(OWNER_ID, r)

        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä—ã–Ω–∫–∞: {e}")

        await asyncio.sleep(check_interval * 60)

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ ==========

@dp.message_handler(lambda message: message.text == 'üöÄ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' or message.text.startswith('/start_check'))
async def start_check(message: types.Message):
    global is_checking
    if not is_checking:
        is_checking = True
        await message.answer("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω.")
        asyncio.create_task(check_market())
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

@dp.message_handler(lambda message: message.text == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' or message.text.startswith('/stop_check'))
async def stop_check(message: types.Message):
    global is_checking
    is_checking = False
    await message.answer("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@dp.message_handler(lambda message: message.text == 'üìä –°—Ç–∞—Ç—É—Å')
async def show_status_button(message: types.Message):
    await status(message)

@dp.message_handler(lambda message: message.text == 'üìú –ò—Å—Ç–æ—Ä–∏—è')
async def show_history_button(message: types.Message):
    await history(message)

@dp.message_handler(lambda message: message.text == 'üîÅ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫')
async def reset_button(message: types.Message):
    await reset_filters(message)

@dp.message_handler(lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
async def help_button(message: types.Message):
    await help_cmd(message)

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
