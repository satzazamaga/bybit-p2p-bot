import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

API_TOKEN = '–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
OWNER_ID = 5791850798  # –¢–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton('/start_check'), KeyboardButton('/stop_check'))
menu.add(KeyboardButton('/status'), KeyboardButton('/history'))
menu.add(KeyboardButton('/reset'), KeyboardButton('/help'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
filter_spread = 5
currencies = ['USDT', 'BTC', 'TON']
banks = []  # –ù–∞–ø—Ä–∏–º–µ—Ä: ['KASPI_BANK', 'HALYK_BANK']
check_interval = 5  # –º–∏–Ω—É—Ç
history_log = []
is_checking = False

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∏–∂–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=menu)

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer("""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/status ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/set_filter [—á–∏—Å–ª–æ] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
/currencies [–≤–∞–ª—é—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
/banks [—Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤
/interval [–º–∏–Ω—É—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
/start_check ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é
/stop_check ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
""", reply_markup=menu)

@dp.message_handler(commands=['status'])
async def status(message: types.Message):
    await message.answer(
        f"–í–∞–ª—é—Ç—ã: {', '.join(currencies)}\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {filter_spread}‚Ç∏\n"
        f"–ë–∞–Ω–∫–∏: {'–≤—Å–µ' if not banks else ', '.join(banks)}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} –º–∏–Ω\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–ö–õ' if is_checking else '–í–´–ö–õ'}"
    )

@dp.message_handler(commands=['set_filter'])
async def set_filter(message: types.Message):
    global filter_spread
    try:
        value = int(message.get_args())
        filter_spread = value
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {filter_spread}‚Ç∏")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: /set_filter 5")

@dp.message_handler(commands=['currencies'])
async def set_currencies(message: types.Message):
    global currencies
    args = message.get_args().split()
    if args:
        currencies = args
        await message.answer(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(currencies)}")
    else:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /currencies USDT BTC")

@dp.message_handler(commands=['banks'])
async def set_banks(message: types.Message):
    global banks
    args = message.get_args().split()
    banks = args
    await message.answer(f"–ë–∞–Ω–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {'–≤—Å–µ' if not banks else ', '.join(banks)}")

@dp.message_handler(commands=['interval'])
async def set_interval(message: types.Message):
    global check_interval
    try:
        value = int(message.get_args())
        check_interval = value
        await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: –∫–∞–∂–¥—ã–µ {check_interval} –º–∏–Ω—É—Ç")
    except:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /interval 10")

@dp.message_handler(commands=['reset'])
async def reset_filters(message: types.Message):
    global filter_spread, currencies, banks
    filter_spread = 5
    currencies = ['USDT', 'BTC', 'TON']
    banks = []
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

@dp.message_handler(commands=['history'])
async def history(message: types.Message):
    if history_log:
        await message.answer("\n\n".join(history_log[-5:]))
    else:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")

@dp.message_handler(commands=['start_check'])
async def start_check(message: types.Message):
    global is_checking
    if not is_checking:
        is_checking = True
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω.")
        asyncio.create_task(check_market())
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

@dp.message_handler(commands=['stop_check'])
async def stop_check(message: types.Message):
    global is_checking
    is_checking = False
    await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Bybit P2P
async def check_market():
    global history_log
    while is_checking:
        now = datetime.now().strftime("%H:%M:%S")
        for currency in currencies:
            try:
                params = {
                    "userId": "",
                    "tokenId": currency,
                    "currencyId": "KZT",
                    "payment": banks,
                    "side": "1",
                    "size": "",
                    "page": 1,
                    "amount": "",
                    "authMaker": False,
                    "canTrade": False
                }
                buy_response = requests.post("https://api2.bybit.com/fiat/otc/item/online", json=params, timeout=10).json()

                params["side"] = "0"
                sell_response = requests.post("https://api2.bybit.com/fiat/otc/item/online", json=params, timeout=10).json()

                buy_price = float(buy_response['result']['items'][0]['price'])
                sell_price = float(sell_response['result']['items'][0]['price'])
                spread = sell_price - buy_price

                if spread >= filter_spread:
                    msg = (
                        f"[{now}] {currency}\n"
                        f"üîπ –ö—É–ø–∏—Ç—å –∑–∞ {buy_price:.2f}‚Ç∏\n"
                        f"üî∏ –ü—Ä–æ–¥–∞—Ç—å –∑–∞ {sell_price:.2f}‚Ç∏\n"
                        f"üìä –°–ø—Ä–µ–¥: {spread:.2f}‚Ç∏"
                    )
                    history_log.append(msg)
                    await bot.send_message(OWNER_ID, msg)

            except Exception as e:
                await bot.send_message(OWNER_ID, f"[{now}] –û—à–∏–±–∫–∞ –ø–æ {currency}: {e}")

        await asyncio.sleep(check_interval * 60)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
