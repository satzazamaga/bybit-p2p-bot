import os
import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env —Ñ–∞–π–ª–∞–º–∏

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# üîê –¢–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('API_TOKEN')  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
OWNER_ID = 5791850798

if API_TOKEN is None:
    raise ValueError("API_TOKEN is not set. Please set the API_TOKEN environment variable.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
min_filter_spread = 5
max_filter_spread = 50
currencies = ['USDT', 'BTC', 'TON']
banks = []
check_interval = 5  # –º–∏–Ω—É—Ç
history_log = []
is_checking = False

# üîπ –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(
    KeyboardButton('üìÖ –°—Ç–∞—Ç—É—Å'),
    KeyboardButton('üìà –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
    KeyboardButton('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'),
    KeyboardButton('üìÉ –ò—Å—Ç–æ—Ä–∏—è'),
    KeyboardButton('‚öñÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'),
    KeyboardButton('üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É'),
    KeyboardButton('üèõÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫–∏'),
    KeyboardButton('‚è≤Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª'),
    KeyboardButton('üîß –ü–æ–º–æ—â—å')
)

# ========== üîß –ö–æ–º–∞–Ω–¥—ã ==========

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=menu)

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer("""
‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/status ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/set_filter [–º–∏–Ω] [–º–∞–∫—Å] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
/currencies [–≤–∞–ª—é—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
/banks [—Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤
/interval [–º–∏–Ω—É—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
/start_check ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é
/stop_check ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
/help ‚Äî –ø–æ–º–æ—â—å
""", reply_markup=menu)

@dp.message_handler(commands=['status'])
async def status(message: types.Message):
    await message.answer(
        f"üìä –°—Ç–∞—Ç—É—Å:\n\nüåê –í–∞–ª—é—Ç—ã: {', '.join(currencies)}\n"
        f"üîÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {min_filter_spread}‚Ç∏\n"
        f"üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {max_filter_spread}‚Ç∏\n"
        f"üèõÔ∏è –ë–∞–Ω–∫–∏: {'–≤—Å–µ' if not banks else ', '.join(banks)}\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} –º–∏–Ω\n"
        f"üì¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–í–ö–õ' if is_checking else '–í–´–ö–õ'}"
    )

@dp.message_handler(commands=['set_filter'])
async def set_filter_cmd(message: types.Message):
    global min_filter_spread, max_filter_spread
    try:
        args = message.get_args().split()
        if len(args) == 2:
            min_filter_spread = int(args[0])
            max_filter_spread = int(args[1])
            await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Ç {min_filter_spread}‚Ç∏ –¥–æ {max_filter_spread}‚Ç∏")
        else:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞: /set_filter <–º–∏–Ω> <–º–∞–∫—Å>")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞: /set_filter 5 50")

@dp.message_handler(commands=['currencies'])
async def set_currencies(message: types.Message):
    global currencies
    args = message.get_args().split()
    if args:
        currencies = args
        await message.answer(f"üåê –í–∞–ª—é—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(currencies)}")
    else:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /currencies USDT BTC")

@dp.message_handler(commands=['banks'])
async def set_banks(message: types.Message):
    global banks
    args = message.get_args().split()
    banks = args
    await message.answer(f"üèõÔ∏è –ë–∞–Ω–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {'–≤—Å–µ' if not banks else ', '.join(banks)}")

@dp.message_handler(commands=['interval'])
async def set_interval(message: types.Message):
    global check_interval
    try:
        value = int(message.get_args())
        check_interval = value
        await message.answer(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {check_interval} –º–∏–Ω—É—Ç")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: /interval 10")

@dp.message_handler(commands=['reset'])
async def reset_filters(message: types.Message):
    global min_filter_spread, max_filter_spread, currencies, banks
    min_filter_spread = 5
    max_filter_spread = 50
    currencies = ['USDT', 'BTC', 'TON']
    banks = []
    await message.answer("‚ôªÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

@dp.message_handler(commands=['history'])
async def history(message: types.Message):
    if history_log:
        await message.answer("\n\n".join(history_log[-5:]))
    else:
        await message.answer("üîê –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")

# ========== üîπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ Bybit ==========

async def check_market():
    global history_log
    while is_checking:
        results = []
        now = datetime.now().strftime("%H:%M:%S")
        for currency in currencies:
            payload_buy = {
                "userId": "",
                "tokenId": currency,
                "side": "1",
                "currencyId": "KZT",
                "payment": banks if banks else [],
                "page": 1,
                "size": 1,
                "amount": "",
                "authMaker": False
            }
            payload_sell = payload_buy.copy()
            payload_sell["side"] = "0"

            try:
                response_buy = requests.post("https://api2.bybit.com/fiat/otc/item/online", json=payload_buy)
                response_sell = requests.post("https://api2.bybit.com/fiat/otc/item/online", json=payload_sell)
                buy_data = response_buy.json()
                sell_data = response_sell.json()

                if response_buy.status_code == 200 and response_sell.status_code == 200:
                    if not buy_data['result']['items'] or not sell_data['result']['items']:
                        results.append(f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è {currency} –Ω–µ—Ç.")
                        continue
                    
                    buy_price = float(buy_data['result']['items'][0]['price'])
                    sell_price = float(sell_data['result']['items'][0]['price'])
                    spread = sell_price - buy_price

                    if min_filter_spread <= spread <= max_filter_spread:
                        result = f"[{now}] {currency}: ‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ {buy_price}‚Ç∏ / ‚ùå –ü—Ä–æ–¥–∞—Ç—å –∑–∞ {sell_price}‚Ç∏ ‚Äî –°–ø—Ä–µ–¥: {spread:.2f}‚Ç∏"
                        results.append(result)

                else:
                    reason = buy_data.get("ret_msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.")
                    results.append(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {currency}: {reason}")

            except Exception as e:
                results.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

        if results:
            for r in results:
                history_log.append(r)
                await bot.send_message(OWNER_ID, r)

        await asyncio.sleep(check_interval * 60)

@dp.message_handler(commands=['start_check'])
async def start_check(message: types.Message):
    global is_checking
    if not is_checking:
        is_checking = True
        await message.answer("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")
        asyncio.create_task(check_market())
    else:
        await message.answer("‚ö†Ô∏è –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

@dp.message_handler(commands=['stop_check'])
async def stop_check(message: types.Message):
    global is_checking
    is_checking = False
    await message.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ========== ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ ==========

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
