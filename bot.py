import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, Filters, MessageHandler
import requests
from datetime import datetime
import pytz

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ====== #
TOKEN = "8093706202:AAHRJz_paYKZ0R50TbUhcprxXmJd0VXy_mA"
AUTHORIZED_USERS = [6037372226]  # –í–∞—à ID –¥–æ–±–∞–≤–ª–µ–Ω (—É–∑–Ω–∞–ª —á–µ—Ä–µ–∑ @userinfobot)

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_SETTINGS = {
    'spread_min': 1,
    'spread_max': 5,
    'currencies': ['USDT', 'BTC', 'ETH', 'TON'],
    'banks': ['Kaspi', 'Halyk', 'Sber', 'Tinkoff'],
    'interval': 15,
    'active': False,
    'history': []
}

# ====== BYBIT API ====== #
BYBIT_API_URL = "https://api2.bybit.com/spot/api/v3/public/quote/depth"

def get_p2p_data(currency="USDT", bank="Kaspi"):
    """–†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ P2P Bybit"""
    try:
        params = {
            "symbol": f"{currency}RUB",  # –ù–∞–ø—Ä–∏–º–µ—Ä, USDT/RUB
            "payment": bank,
            "side": "1",  # 1 = –ø–æ–∫—É–ø–∫–∞, 0 = –ø—Ä–æ–¥–∞–∂–∞
            "limit": 20
        }
        response = requests.get(BYBIT_API_URL, params=params).json()
        return response.get('data', [])
    except Exception as e:
        logging.error(f"API Error: {e}")
        return []

# ====== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ====== #
def filter_offers(offers, settings):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    filtered = []
    for offer in offers:
        spread = calculate_spread(offer)
        if (settings['spread_min'] <= spread <= settings['spread_max'] and
            offer['currency'] in settings['currencies'] and
            offer['bank'] in settings['banks']):
            filtered.append(offer)
    return filtered

def calculate_spread(offer):
    """–†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–æ–π –∏ –ø—Ä–æ–¥–∞–∂–µ–π"""
    return (offer['ask_price'] - offer['bid_price']) / offer['bid_price'] * 100

# ====== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====== #
def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start"""
    user = update.effective_user
    if user.id not in AUTHORIZED_USERS:
        update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @mmaskop")
        return

    user_data[user.id] = DEFAULT_SETTINGS.copy()
    
    keyboard = [
        ['/status üîç', '/set_filter ‚öôÔ∏è'],
        ['/currencies üí∞', '/banks üè¶'],
        ['/interval ‚è±', '/start_check ‚ñ∂Ô∏è'],
        ['/stop_check ‚èπ', '/history üìú'],
        ['/reset üîÑ', '/help ‚ùì']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "ü§ñ *P2P Monitor Bybit*\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª—É—á—à–∏–µ P2P-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ... (–¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)

# ====== –ó–ê–ü–£–°–ö ====== #
if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    # ... (–¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã)

    # –ó–∞–ø—É—Å–∫
    updater.start_polling()
    updater.idle()
