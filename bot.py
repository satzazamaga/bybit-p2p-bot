import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackContext
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ====== #
TELEGRAM_BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

AUTHORIZED_USERS = [6037372226]  # –í–∞—à ID (–¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_SETTINGS = {
    'spread_min': 1,
    'spread_max': 5,
    'currencies': ['USDT', 'BTC', 'ETH', 'TON'],
    'banks': ['Kaspi', 'Halyk', 'Sber', 'Tinkoff'],
    'interval': 15,
    'active': False,
    'history': []
}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

# ====== –ö–û–ú–ê–ù–î–´ ====== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: @mmaskop")
        return

    user_data[user.id] = DEFAULT_SETTINGS.copy()
    
    keyboard = [
        ['/status üîç', '/set_filter ‚öôÔ∏è'],
        ['/currencies üí∞', '/banks üè¶'],
        ['/interval ‚è±', '/start_check ‚ñ∂Ô∏è'],
        ['/stop_check ‚èπ', '/history üìú'],
        ['/reset üîÑ', '/help ‚ùì']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "ü§ñ *P2P Monitor Bybit*\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª—É—á—à–∏–µ P2P-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# ... (–¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)

def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    # ... (–¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)

    application.run_polling()

if __name__ == '__main__':
    main()
